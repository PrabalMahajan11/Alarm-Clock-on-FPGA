/* Generated by Yosys 0.9 (git sha1 1979e0b) */

module iiitb_clockfpga(reset, clk, H_in1, H_in0, M_in1, M_in0, LD_time, LD_alarm, STOP_al, AL_ON, Alarm, H_out1, H_out0, M_out1, M_out0, S_out1, S_out0);
  reg [3:0] _000_;
  reg [5:0] _001_;
  reg [3:0] _002_;
  reg [5:0] _003_;
  reg _004_;
  reg [3:0] _005_;
  reg [1:0] _006_;
  reg [3:0] _007_;
  reg [3:0] _008_;
  reg [3:0] _009_;
  reg [3:0] _010_;
  reg [3:0] _011_;
  reg [1:0] _012_;
  reg [3:0] _013_;
  reg [3:0] _014_;
  reg [3:0] _015_;
  reg [3:0] _016_;
  reg _017_;
  reg [3:0] _018_;
  reg [5:0] _019_;
  reg [5:0] _020_;
  reg [5:0] _021_;
  reg [1:0] _022_;
  reg [1:0] _023_;
  wire [31:0] _024_;
  wire [31:0] _025_;
  wire [31:0] _026_;
  wire [31:0] _027_;
  wire [31:0] _028_;
  wire [31:0] _029_;
  wire [31:0] _030_;
  wire [31:0] _031_;
  wire _032_;
  reg [3:0] _033_;
  reg [5:0] _034_;
  reg [3:0] _035_;
  reg [5:0] _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire [31:0] _054_;
  wire [31:0] _055_;
  wire [31:0] _056_;
  wire [31:0] _057_;
  wire [31:0] _058_;
  wire [31:0] _059_;
  wire [31:0] _060_;
  wire [31:0] _061_;
  wire [31:0] _062_;
  wire [31:0] _063_;
  wire [31:0] _064_;
  wire [31:0] _065_;
  wire [31:0] _066_;
  wire [31:0] _067_;
  wire [31:0] _068_;
  wire [31:0] _069_;
  wire [31:0] _070_;
  wire [31:0] _071_;
  wire [31:0] _072_;
  wire [31:0] _073_;
  input AL_ON;
  output Alarm;
  reg Alarm;
  input [3:0] H_in0;
  input [1:0] H_in1;
  output [3:0] H_out0;
  output [1:0] H_out1;
  input LD_alarm;
  input LD_time;
  input [3:0] M_in0;
  input [3:0] M_in1;
  output [3:0] M_out0;
  output [3:0] M_out1;
  input STOP_al;
  output [3:0] S_out0;
  output [3:0] S_out1;
  reg [3:0] a_hour0;
  reg [1:0] a_hour1;
  reg [3:0] a_min0;
  reg [3:0] a_min1;
  reg [3:0] a_sec0;
  reg [3:0] a_sec1;
  reg [3:0] c_hour0;
  reg [1:0] c_hour1;
  reg [3:0] c_min0;
  reg [3:0] c_min1;
  reg [3:0] c_sec0;
  reg [3:0] c_sec1;
  input clk;
  reg clk_1s;
  input reset;
  reg [3:0] tmp_1s;
  reg [5:0] tmp_hour;
  reg [5:0] tmp_minute;
  reg [5:0] tmp_second;
  assign _024_ = tmp_1s + 32'd1;
  assign _025_ = _057_ + H_in0;
  assign _026_ = _058_ + M_in0;
  assign _027_ = _059_ + H_in0;
  assign _028_ = _060_ + M_in0;
  assign _029_ = tmp_second + 32'd1;
  assign _030_ = tmp_minute + 32'd1;
  assign _031_ = tmp_hour + 32'd1;
  assign _032_ = { a_hour1, a_hour0, a_min1, a_min0, a_sec1, a_sec0 } == { c_hour1, c_hour0, c_min1, c_min0, c_sec1, c_sec0 };
  assign _037_ = tmp_1s >= 32'd10;
  assign _038_ = tmp_hour >= 32'd20;
  assign _039_ = tmp_hour >= 32'd10;
  assign _040_ = tmp_minute >= 32'd50;
  assign _041_ = tmp_minute >= 32'd40;
  assign _042_ = tmp_minute >= 32'd30;
  assign _043_ = tmp_minute >= 32'd20;
  assign _044_ = tmp_minute >= 32'd10;
  assign _045_ = tmp_second >= 32'd50;
  assign _046_ = tmp_second >= 32'd40;
  assign _047_ = tmp_second >= 32'd30;
  assign _048_ = tmp_second >= 32'd20;
  assign _049_ = tmp_second >= 32'd10;
  assign _050_ = tmp_second >= 32'd59;
  assign _051_ = tmp_minute >= 32'd59;
  assign _052_ = tmp_hour >= 32'd24;
  assign _053_ = tmp_1s <= 32'd5;
  assign _054_ = _022_ * 32'd10;
  assign _055_ = _068_[3:0] * 32'd10;
  assign _056_ = _073_[3:0] * 32'd10;
  assign _057_ = H_in1 * 32'd10;
  assign _058_ = M_in1 * 32'd10;
  assign _059_ = H_in1 * 32'd10;
  assign _060_ = M_in1 * 32'd10;
  assign _061_ = tmp_hour - _054_;
  assign _062_ = tmp_minute - _055_;
  assign _063_ = tmp_second - _056_;
  assign _064_ = _044_ ? 32'd1 : 32'd0;
  assign _065_ = _043_ ? 32'd2 : _064_;
  assign _066_ = _042_ ? 32'd3 : _065_;
  assign _067_ = _041_ ? 32'd4 : _066_;
  assign _068_ = _040_ ? 32'd5 : _067_;
  assign _069_ = _049_ ? 32'd1 : 32'd0;
  assign _070_ = _048_ ? 32'd2 : _069_;
  assign _071_ = _047_ ? 32'd3 : _070_;
  assign _072_ = _046_ ? 32'd4 : _071_;
  assign _073_ = _045_ ? 32'd5 : _072_;
  always @* begin
    _017_ = clk_1s;
    _018_ = tmp_1s;
    casez (reset)
      1'h1:
        begin
          _018_ = 4'h0;
          _017_ = 1'h0;
        end
      default:
        begin
          _018_ = _024_[3:0];
          casez (_053_)
            1'h1:
                _017_ = 1'h0;
            default:
                casez (_037_)
                  1'h1:
                    begin
                      _017_ = 1'h1;
                      _018_ = 4'h1;
                    end
                  default:
                      _017_ = 1'h1;
                endcase
          endcase
        end
    endcase
  end
  always @(posedge clk) begin
      clk_1s <= _017_;
      tmp_1s <= _018_;
  end
  always @(posedge reset) begin
      clk_1s <= _017_;
      tmp_1s <= _018_;
  end
  always @* begin
    _012_ = _022_;
    _011_ = _061_[3:0];
    _001_ = tmp_minute;
    _000_ = _068_[3:0];
    _014_ = _068_[3:0];
    _013_ = _062_[3:0];
    _003_ = tmp_second;
    _002_ = _073_[3:0];
    _016_ = _073_[3:0];
    _015_ = _063_[3:0];
    casez (_038_)
      1'h1:
        begin
          _022_ = 2'h2;
        end
      default:
        begin
          _022_ = _023_;
          casez (_039_)
            1'h1:
              begin
                _023_ = 2'h1;
              end
            default:
              begin
                _023_ = 2'h0;
              end
          endcase
        end
    endcase
  end
  always @* begin
      c_hour1 <= _012_;
      c_hour0 <= _011_;
      c_min1 <= _014_;
      c_min0 <= _013_;
      c_sec1 <= _016_;
      c_sec0 <= _015_;
      _033_ <= 4'hx;
      _034_ <= 6'hxx;
      _035_ <= 4'hx;
      _036_ <= 6'hxx;
  end
  always @* begin
    _004_ = Alarm;
    casez (reset)
      1'h1:
          _004_ = 1'h0;
      default:
        begin
          casez (_032_)
            1'h1:
                casez (AL_ON)
                  1'h1:
                      _004_ = 1'h1;
                  default:
                      /* empty */;
                endcase
            default:
                /* empty */;
          endcase
          casez (STOP_al)
            1'h1:
                _004_ = 1'h0;
            default:
                /* empty */;
          endcase
        end
    endcase
  end
  always @(posedge clk_1s) begin
      Alarm <= _004_;
  end
  always @(posedge reset) begin
      Alarm <= _004_;
  end
  always @* begin
    _019_ = tmp_hour;
    _020_ = tmp_minute;
    _021_ = tmp_second;
    _006_ = a_hour1;
    _005_ = a_hour0;
    _008_ = a_min1;
    _007_ = a_min0;
    _010_ = a_sec1;
    _009_ = a_sec0;
    casez (reset)
      1'h1:
        begin
          _006_ = 2'h0;
          _005_ = 4'h0;
          _008_ = 4'h0;
          _007_ = 4'h0;
          _010_ = 4'h0;
          _009_ = 4'h0;
          _019_ = _025_[5:0];
          _020_ = _026_[5:0];
          _021_ = 6'h00;
        end
      default:
        begin
          casez (LD_alarm)
            1'h1:
              begin
                _006_ = H_in1;
                _005_ = H_in0;
                _008_ = M_in1;
                _007_ = M_in0;
                _010_ = 4'h0;
                _009_ = 4'h0;
              end
            default:
                /* empty */;
          endcase
          casez (LD_time)
            1'h1:
              begin
                _019_ = _027_[5:0];
                _020_ = _028_[5:0];
                _021_ = 6'h00;
              end
            default:
              begin
                _021_ = _029_[5:0];
                casez (_050_)
                  1'h1:
                    begin
                      _020_ = _030_[5:0];
                      _021_ = 6'h00;
                      casez (_051_)
                        1'h1:
                          begin
                            _020_ = 6'h00;
                            _019_ = _031_[5:0];
                            casez (_052_)
                              1'h1:
                                  _019_ = 6'h00;
                              default:
                                  /* empty */;
                            endcase
                          end
                        default:
                            /* empty */;
                      endcase
                    end
                  default:
                      /* empty */;
                endcase
              end
          endcase
        end
    endcase
  end
  always @(posedge clk_1s) begin
      tmp_hour <= _019_;
      tmp_minute <= _020_;
      tmp_second <= _021_;
      a_hour1 <= _006_;
      a_hour0 <= _005_;
      a_min1 <= _008_;
      a_min0 <= _007_;
      a_sec1 <= _010_;
      a_sec0 <= _009_;
  end
  always @(posedge reset) begin
      tmp_hour <= _019_;
      tmp_minute <= _020_;
      tmp_second <= _021_;
      a_hour1 <= _006_;
      a_hour0 <= _005_;
      a_min1 <= _008_;
      a_min0 <= _007_;
      a_sec1 <= _010_;
      a_sec0 <= _009_;
  end
  assign H_out1 = c_hour1;
  assign H_out0 = c_hour0;
  assign M_out1 = c_min1;
  assign M_out0 = c_min0;
  assign S_out1 = c_sec1;
  assign S_out0 = c_sec0;
endmodule
